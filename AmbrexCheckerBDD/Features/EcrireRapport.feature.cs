// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AmbrexCheckerBDD.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class GenerationDuRapportDeVerificationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EcrireRapport.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("fr-FR"), "Génération du rapport de vérification", "En tant qu’utilisateur d’AGEX\r\nAfin de vérifier la traçabilité entre mes exigence" +
                    "s\r\nJe veux un rapport donnat l\'état de la vérification", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Génération du rapport de vérification")))
            {
                AmbrexCheckerBDD.Features.GenerationDuRapportDeVerificationFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Génération du rapport avec erreur")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Génération du rapport de vérification")]
        public virtual void GenerationDuRapportAvecErreur()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Génération du rapport avec erreur", ((string[])(null)));
#line 22
  this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "exigence",
                        "exigence_inconnu"});
            table1.AddRow(new string[] {
                        "ESD04",
                        "ESG05"});
            table1.AddRow(new string[] {
                        "ESD03",
                        "ESG09"});
#line 23
 testRunner.Given("les exigences couvrant une exigence inconnue:", ((string)(null)), table1, "Soit ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "exigence"});
            table2.AddRow(new string[] {
                        "ESG07"});
            table2.AddRow(new string[] {
                        "ESG08"});
#line 27
  testRunner.And("les exigences non couvertes", ((string)(null)), table2, "Et ");
#line 31
 testRunner.When("je génére le rapport", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line 32
 testRunner.Then("le rapport indique que la couverture des exigences est mauvaise", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "erreur"});
            table3.AddRow(new string[] {
                        "l\'exigence ESG07 n\'est pas couverte"});
            table3.AddRow(new string[] {
                        "l\'exigence ESG08 n\'est pas couverte"});
            table3.AddRow(new string[] {
                        "ESD04 couvre une exigence inconnu : ESG05"});
            table3.AddRow(new string[] {
                        "ESD03 couvre une exigence inconnu : ESG09"});
#line 33
  testRunner.And("le rapport indique les erreurs:", ((string)(null)), table3, "Et ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
