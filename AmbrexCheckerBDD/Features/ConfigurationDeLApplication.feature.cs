// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AmbrexCheckerBDD.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ConfigurationDeLApplicationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ConfigurationDeLApplication.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("fr-FR"), "Configuration de l\'application", "En tant qu\' utilisateur d\'Agex\r\nJe veux configurer mon système\r\nAfin de définir l" +
                    "es fichiers à analyser", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Configuration de l\'application")))
            {
                AmbrexCheckerBDD.Features.ConfigurationDeLApplicationFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Configuration réussi du plugin")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configuration de l\'application")]
        public virtual void ConfigurationReussiDuPlugin()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Configuration réussi du plugin", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
  testRunner.Given("l\'application lancé avec une ligne de commande", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Soit ");
#line 8
    testRunner.And("la ligne de commande contient \'-amont=\"fichier amont.txt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 9
    testRunner.And("la ligne de commande contient \'-aval=\"fichier aval.doc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 10
  testRunner.When("j\'analyse la ligne de commande", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line 11
  testRunner.Then("le fichier contenant les exigences amonts est fichier amont.txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line 12
    testRunner.And("le fichier contenant les exigences avals est fichier aval.doc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Configuration du plugin sans fichier amont")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configuration de l\'application")]
        public virtual void ConfigurationDuPluginSansFichierAmont()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Configuration du plugin sans fichier amont", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
  testRunner.Given("l\'application lancé avec une ligne de commande", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Soit ");
#line 16
    testRunner.And("la ligne de commande contient \'-aval=\"fichier aval.doc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 17
    testRunner.And("la ligne de commande ne contient pas de commutateur -amont", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 18
  testRunner.When("j\'analyse la ligne de commande", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line 19
  testRunner.Then("un message d\'erreur apparait \"le fichier amont n\'est pas renseigné\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line 20
    testRunner.And("l\'application arrête son traitement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Configuration du plugin sans fichier aval")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configuration de l\'application")]
        public virtual void ConfigurationDuPluginSansFichierAval()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Configuration du plugin sans fichier aval", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
  testRunner.Given("l\'application lancé avec une ligne de commande", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Soit ");
#line 24
    testRunner.And("la ligne de commande contient \'-amont=\"fichier amont.doc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 25
    testRunner.And("la ligne de commande ne contient pas de commutateur -aval", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 26
  testRunner.When("j\'analyse la ligne de commande", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line 27
  testRunner.Then("un message d\'erreur apparait \"le fichier aval n\'est pas renseigné\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line 28
    testRunner.And("l\'application arrête son traitement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
