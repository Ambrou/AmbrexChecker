// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AmbrexCheckerBDD.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class EtatDeLaCouvertureDExigencesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EtatCouvertureExigence.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("fr-FR"), "Etat de la couverture d\'exigences", "En tant qu’utilisateur d’AGEX\r\nAfin de vérifier la traçabilité entre mes exigence" +
                    "s\r\nJe veux savoir si toutes les exigences Amonts sont couvertes par au moins une" +
                    " exigence Aval", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Etat de la couverture d\'exigences")))
            {
                AmbrexCheckerBDD.Features.EtatDeLaCouvertureDExigencesFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Couverture des exigences Amont par Aval avec une exigence Amont non couverte")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Etat de la couverture d\'exigences")]
        public virtual void CouvertureDesExigencesAmontParAvalAvecUneExigenceAmontNonCouverte()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Couverture des exigences Amont par Aval avec une exigence Amont non couverte", ((string[])(null)));
#line 8
  this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReqID"});
            table1.AddRow(new string[] {
                        "ESG01"});
            table1.AddRow(new string[] {
                        "ESG02"});
            table1.AddRow(new string[] {
                        "ESG03"});
            table1.AddRow(new string[] {
                        "ESG04"});
            table1.AddRow(new string[] {
                        "ESG05"});
            table1.AddRow(new string[] {
                        "ESG06"});
#line 9
 testRunner.Given("les exigences amonts:", ((string)(null)), table1, "Soit ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReqID",
                        "ReqID-Amont"});
            table2.AddRow(new string[] {
                        "ESD01",
                        "ESG01 ESG04"});
            table2.AddRow(new string[] {
                        "ESD02",
                        "ESG03 ESG02"});
            table2.AddRow(new string[] {
                        "ESD04",
                        "ESG04"});
            table2.AddRow(new string[] {
                        "ESD05",
                        "ESG03"});
#line 17
 testRunner.And("les exigences avals:", ((string)(null)), table2, "Et ");
#line 23
 testRunner.When("je compare ces deux listes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line 24
 testRunner.Then("les exigences amonts ne sont pas correctement couvertes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Couverture des exigences Amont par Aval avec une exigence Amont oublié")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Etat de la couverture d\'exigences")]
        public virtual void CouvertureDesExigencesAmontParAvalAvecUneExigenceAmontOublie()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Couverture des exigences Amont par Aval avec une exigence Amont oublié", ((string[])(null)));
#line 28
  this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReqID"});
            table3.AddRow(new string[] {
                        "ESG01"});
            table3.AddRow(new string[] {
                        "ESG02"});
            table3.AddRow(new string[] {
                        "ESG03"});
            table3.AddRow(new string[] {
                        "ESG04"});
#line 29
 testRunner.Given("les exigences amonts:", ((string)(null)), table3, "Soit ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReqID",
                        "ReqID-Amont"});
            table4.AddRow(new string[] {
                        "ESD01",
                        "ESG01 ESG04"});
            table4.AddRow(new string[] {
                        "ESD02",
                        "ESG03 ESG02"});
            table4.AddRow(new string[] {
                        "ESD04",
                        "ESG04 ESG05"});
            table4.AddRow(new string[] {
                        "ESD05",
                        "ESG03"});
#line 35
 testRunner.And("les exigences avals:", ((string)(null)), table4, "Et ");
#line 41
 testRunner.When("je compare ces deux listes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line 42
 testRunner.Then("les exigences amonts ne sont pas correctement couvertes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Traçabailité correct entre les exigences amonts et les exigences avales")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Etat de la couverture d\'exigences")]
        public virtual void TracabailiteCorrectEntreLesExigencesAmontsEtLesExigencesAvales()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Traçabailité correct entre les exigences amonts et les exigences avales", ((string[])(null)));
#line 45
  this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReqID"});
            table5.AddRow(new string[] {
                        "ESG01"});
            table5.AddRow(new string[] {
                        "ESG02"});
            table5.AddRow(new string[] {
                        "ESG03"});
            table5.AddRow(new string[] {
                        "ESG04"});
            table5.AddRow(new string[] {
                        "ESG05"});
#line 46
 testRunner.Given("les exigences amonts:", ((string)(null)), table5, "Etant donné ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReqID",
                        "ReqID-Amont"});
            table6.AddRow(new string[] {
                        "ESD01",
                        "ESG01 ESG04"});
            table6.AddRow(new string[] {
                        "ESD02",
                        "ESG03 ESG02"});
            table6.AddRow(new string[] {
                        "ESD03",
                        "ESG05"});
            table6.AddRow(new string[] {
                        "ESD04",
                        "ESG04"});
            table6.AddRow(new string[] {
                        "ESD05",
                        "ESG03"});
#line 53
 testRunner.And("les exigences avals:", ((string)(null)), table6, "Et ");
#line 60
 testRunner.When("je compare ces deux listes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line 61
 testRunner.Then("les exigences amont sont correctement couvertes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
